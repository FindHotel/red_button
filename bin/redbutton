#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'redbutton'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/redbutton` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/redbutton now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Redbutton::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Describe notes here'
arg_name 'Describe arguments to notes here'
command :release_notes do |c|
  c.desc 'Path of the Git project'
  c.flag :project_path

  c.desc 'Source branch for getting the release notes'
  c.default_value 'develop'
  c.flag :branch

  # TODO implement configurable matchers logic
  # c.desc ''
  # c.flag :matchers
  #

  # TODO implement configurable last_message_matcher logic
  # c.desc ''
  # c.flag :last_message_matcher
  #
  c.action do |_, options, _|
    config = {
      matchers: {
        bugfix: ['BUGFIX:'],
        feature: ['FEATURE:'],
        change: ['CHANGE:']
      },
      last_message_matcher: 'Merge tag',
      source_branch: options[:develop]
    }

    glr = GitLogReader.new(options[:project_path], config)

    commit_messages = glr.read

    puts commit_messages.inspect
  end
end

desc 'Describe version here'
arg_name 'Describe arguments to version here'
command :version do |c|

  c.desc 'Path of the version file'
  c.default_value 'config/initializers/version.rb'
  c.flag :version_file

  c.desc 'Version segment to update'
  c.default_value 'patch'
  c.flag :segment

  c.action do |_, options, _|
    version_file_tool = VersionFileTool.new(options[:version_file])

    version = ProjectVersion.new(*version_file_tool.parse_version.values)
    version.bump!(options[:segment])

    version_file_tool.update_version(version.to_s)
  end
end

desc 'Describe all here'
arg_name 'Describe arguments to all here'
command :all do |c|
  c.action do |global_options,options,args|
    puts "all command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
